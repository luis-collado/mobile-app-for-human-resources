{"ast":null,"code":"import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../reanimated1/derived\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors, options) {\n  'worklet';\n\n  var h = 0;\n  var _options$useCorrected = options.useCorrectedHSVInterpolation,\n    useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n  if (useCorrectedHSVInterpolation) {\n    var correctedInputRange = [inputRange[0]];\n    var originalH = colors.h;\n    var correctedH = [originalH[0]];\n    for (var i = 1; i < originalH.length; ++i) {\n      var d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h = (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  var s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  var v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\nvar toLinearSpace = function toLinearSpace(x, gamma) {\n  'worklet';\n\n  return x.map(function (v) {\n    return Math.pow(v / 255, gamma);\n  });\n};\nvar toGammaSpace = function toGammaSpace(x, gamma) {\n  'worklet';\n\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors, options) {\n  'worklet';\n\n  var _options$gamma = options.gamma,\n    gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n  var outputR = colors.r,\n    outputG = colors.g,\n    outputB = colors.b;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  var r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  var g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  var b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n};\nvar getInterpolateRGB = function getInterpolateRGB(colors) {\n  'worklet';\n\n  var r = [];\n  var g = [];\n  var b = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n};\nvar getInterpolateHSV = function getInterpolateHSV(colors) {\n  'worklet';\n\n  var h = [];\n  var s = [];\n  var v = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n    if (typeof processedColor === 'number') {\n      var processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return {\n    h: h,\n    s: s,\n    v: v,\n    a: a\n  };\n};\nexport var interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n  }\n  throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null),\n    options: options\n  });\n}\nexport var interpolateSharableColor = function interpolateSharableColor(value, interpolateConfig) {\n  'worklet';\n\n  var colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n  }\n  throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};","map":{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","Extrapolate","useSharedValue","interpolateColorsHSV","value","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","CLAMP","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","_options$gamma","outputR","r","outputG","g","outputB","b","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","arguments","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["D:/Desktop/Tim/mobile-app-for-human-resources/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\r\nimport { makeMutable } from './core';\r\nimport { interpolate } from './interpolation';\r\n// @ts-ignore JS file\r\nimport { Extrapolate } from '../reanimated1/derived';\r\nimport { useSharedValue } from './hook/useSharedValue';\r\nconst interpolateColorsHSV = (value, inputRange, colors, options) => {\r\n    'worklet';\r\n    let h = 0;\r\n    const { useCorrectedHSVInterpolation = true } = options;\r\n    if (useCorrectedHSVInterpolation) {\r\n        // if the difference between hues in a range is > 180 deg\r\n        // then move the hue at the right end of the range +/- 360 deg\r\n        // and add the next point in the original place + 0.00001 with original hue\r\n        // to not break the next range\r\n        const correctedInputRange = [inputRange[0]];\r\n        const originalH = colors.h;\r\n        const correctedH = [originalH[0]];\r\n        for (let i = 1; i < originalH.length; ++i) {\r\n            const d = originalH[i] - originalH[i - 1];\r\n            if (originalH[i] > originalH[i - 1] && d > 0.5) {\r\n                correctedInputRange.push(inputRange[i]);\r\n                correctedInputRange.push(inputRange[i] + 0.00001);\r\n                correctedH.push(originalH[i] - 1);\r\n                correctedH.push(originalH[i]);\r\n            }\r\n            else if (originalH[i] < originalH[i - 1] && d < -0.5) {\r\n                correctedInputRange.push(inputRange[i]);\r\n                correctedInputRange.push(inputRange[i] + 0.00001);\r\n                correctedH.push(originalH[i] + 1);\r\n                correctedH.push(originalH[i]);\r\n            }\r\n            else {\r\n                correctedInputRange.push(inputRange[i]);\r\n                correctedH.push(originalH[i]);\r\n            }\r\n        }\r\n        h =\r\n            (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\r\n                1) %\r\n                1;\r\n    }\r\n    else {\r\n        h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\r\n    }\r\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\r\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\r\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\r\n    return hsvToColor(h, s, v, a);\r\n};\r\nconst toLinearSpace = (x, gamma) => {\r\n    'worklet';\r\n    return x.map((v) => Math.pow(v / 255, gamma));\r\n};\r\nconst toGammaSpace = (x, gamma) => {\r\n    'worklet';\r\n    return Math.round(Math.pow(x, 1 / gamma) * 255);\r\n};\r\nconst interpolateColorsRGB = (value, inputRange, colors, options) => {\r\n    'worklet';\r\n    const { gamma = 2.2 } = options;\r\n    let { r: outputR, g: outputG, b: outputB } = colors;\r\n    if (gamma !== 1) {\r\n        outputR = toLinearSpace(outputR, gamma);\r\n        outputG = toLinearSpace(outputG, gamma);\r\n        outputB = toLinearSpace(outputB, gamma);\r\n    }\r\n    const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\r\n    const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\r\n    const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\r\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\r\n    if (gamma === 1) {\r\n        return rgbaColor(r, g, b, a);\r\n    }\r\n    return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\r\n};\r\nconst getInterpolateRGB = (colors) => {\r\n    'worklet';\r\n    const r = [];\r\n    const g = [];\r\n    const b = [];\r\n    const a = [];\r\n    for (let i = 0; i < colors.length; ++i) {\r\n        const color = colors[i];\r\n        const processedColor = processColor(color);\r\n        // explicit check in case if processedColor is 0\r\n        if (processedColor !== null && processedColor !== undefined) {\r\n            r.push(red(processedColor));\r\n            g.push(green(processedColor));\r\n            b.push(blue(processedColor));\r\n            a.push(opacity(processedColor));\r\n        }\r\n    }\r\n    return { r, g, b, a };\r\n};\r\nconst getInterpolateHSV = (colors) => {\r\n    'worklet';\r\n    const h = [];\r\n    const s = [];\r\n    const v = [];\r\n    const a = [];\r\n    for (let i = 0; i < colors.length; ++i) {\r\n        const color = colors[i];\r\n        const processedColor = processColor(color);\r\n        if (typeof processedColor === 'number') {\r\n            const processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\r\n            h.push(processedHSVColor.h);\r\n            s.push(processedHSVColor.s);\r\n            v.push(processedHSVColor.v);\r\n            a.push(opacity(processedColor));\r\n        }\r\n    }\r\n    return { h, s, v, a };\r\n};\r\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB', options = {}) => {\r\n    'worklet';\r\n    if (colorSpace === 'HSV') {\r\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\r\n    }\r\n    else if (colorSpace === 'RGB') {\r\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\r\n    }\r\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\r\n};\r\nexport var ColorSpace;\r\n(function (ColorSpace) {\r\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\r\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\r\n})(ColorSpace || (ColorSpace = {}));\r\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB, options = {}) {\r\n    return useSharedValue({\r\n        inputRange,\r\n        outputRange,\r\n        colorSpace,\r\n        cache: makeMutable(null),\r\n        options,\r\n    });\r\n}\r\nexport const interpolateSharableColor = (value, interpolateConfig) => {\r\n    'worklet';\r\n    let colors = interpolateConfig.value.cache.value;\r\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\r\n        if (!colors) {\r\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\r\n            interpolateConfig.value.cache.value = colors;\r\n        }\r\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\r\n    }\r\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\r\n        if (!colors) {\r\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\r\n            interpolateConfig.value.cache.value = colors;\r\n        }\r\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\r\n    }\r\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\r\n};\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,YAAY,EAAEC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO;AACjF,SAASC,WAAW;AACpB,SAASC,WAAW;AAEpB,SAASC,WAAW;AACpB,SAASC,cAAc;AACvB,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,KAAK,EAAEC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAK;EACjE,SAAS;;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAAC,qBAAA,GAAgDF,OAAO,CAA/CG,4BAA4B;IAA5BA,4BAA4B,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;EAC3C,IAAIC,4BAA4B,EAAE;IAK9B,IAAMC,mBAAmB,GAAG,CAACN,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C,IAAMO,SAAS,GAAGN,MAAM,CAACE,CAAC;IAC1B,IAAMK,UAAU,GAAG,CAACD,SAAS,CAAC,CAAC,CAAC,CAAC;IACjC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;MACvC,IAAME,CAAC,GAAGJ,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC;MACzC,IAAIF,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,IAAIE,CAAC,GAAG,GAAG,EAAE;QAC5CL,mBAAmB,CAACM,IAAI,CAACZ,UAAU,CAACS,CAAC,CAAC,CAAC;QACvCH,mBAAmB,CAACM,IAAI,CAACZ,UAAU,CAACS,CAAC,CAAC,GAAG,OAAO,CAAC;QACjDD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,GAAG,CAAC,CAAC;QACjCD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,CAAC;MACjC,CAAC,MACI,IAAIF,SAAS,CAACE,CAAC,CAAC,GAAGF,SAAS,CAACE,CAAC,GAAG,CAAC,CAAC,IAAIE,CAAC,GAAG,CAAC,GAAG,EAAE;QAClDL,mBAAmB,CAACM,IAAI,CAACZ,UAAU,CAACS,CAAC,CAAC,CAAC;QACvCH,mBAAmB,CAACM,IAAI,CAACZ,UAAU,CAACS,CAAC,CAAC,GAAG,OAAO,CAAC;QACjDD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,GAAG,CAAC,CAAC;QACjCD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,CAAC;MACjC,CAAC,MACI;QACDH,mBAAmB,CAACM,IAAI,CAACZ,UAAU,CAACS,CAAC,CAAC,CAAC;QACvCD,UAAU,CAACI,IAAI,CAACL,SAAS,CAACE,CAAC,CAAC,CAAC;MACjC;IACJ;IACAN,CAAC,GACG,CAACR,WAAW,CAACI,KAAK,EAAEO,mBAAmB,EAAEE,UAAU,EAAEZ,WAAW,CAACiB,KAAK,CAAC,GACnE,CAAC,IACD,CAAC;EACb,CAAC,MACI;IACDV,CAAC,GAAGR,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACE,CAAC,EAAEP,WAAW,CAACiB,KAAK,CAAC;EACnE;EACA,IAAMC,CAAC,GAAGnB,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACa,CAAC,EAAElB,WAAW,CAACiB,KAAK,CAAC;EACrE,IAAME,CAAC,GAAGpB,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACc,CAAC,EAAEnB,WAAW,CAACiB,KAAK,CAAC;EACrE,IAAMG,CAAC,GAAGrB,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACe,CAAC,EAAEpB,WAAW,CAACiB,KAAK,CAAC;EACrE,OAAO3B,UAAU,CAACiB,CAAC,EAAEW,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;AACjC,CAAC;AACD,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,CAAC,EAAEC,KAAK,EAAK;EAChC,SAAS;;EACT,OAAOD,CAAC,CAACE,GAAG,CAAC,UAACL,CAAC;IAAA,OAAKM,IAAI,CAACC,GAAG,CAACP,CAAC,GAAG,GAAG,EAAEI,KAAK,CAAC;EAAA,EAAC;AACjD,CAAC;AACD,IAAMI,YAAY,GAAG,SAAfA,YAAYA,CAAIL,CAAC,EAAEC,KAAK,EAAK;EAC/B,SAAS;;EACT,OAAOE,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,GAAG,CAACJ,CAAC,EAAE,CAAC,GAAGC,KAAK,CAAC,GAAG,GAAG,CAAC;AACnD,CAAC;AACD,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAI1B,KAAK,EAAEC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAK;EACjE,SAAS;;EACT,IAAAwB,cAAA,GAAwBxB,OAAO,CAAvBiB,KAAK;IAALA,KAAK,GAAAO,cAAA,cAAG,GAAG,GAAAA,cAAA;EACnB,IAASC,OAAO,GAA6B1B,MAAM,CAA7C2B,CAAC;IAAcC,OAAO,GAAiB5B,MAAM,CAAjC6B,CAAC;IAAcC,OAAO,GAAK9B,MAAM,CAArB+B,CAAC;EAC/B,IAAIb,KAAK,KAAK,CAAC,EAAE;IACbQ,OAAO,GAAGV,aAAa,CAACU,OAAO,EAAER,KAAK,CAAC;IACvCU,OAAO,GAAGZ,aAAa,CAACY,OAAO,EAAEV,KAAK,CAAC;IACvCY,OAAO,GAAGd,aAAa,CAACc,OAAO,EAAEZ,KAAK,CAAC;EAC3C;EACA,IAAMS,CAAC,GAAGjC,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAE2B,OAAO,EAAE/B,WAAW,CAACiB,KAAK,CAAC;EACpE,IAAMiB,CAAC,GAAGnC,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAE6B,OAAO,EAAEjC,WAAW,CAACiB,KAAK,CAAC;EACpE,IAAMmB,CAAC,GAAGrC,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAE+B,OAAO,EAAEnC,WAAW,CAACiB,KAAK,CAAC;EACpE,IAAMG,CAAC,GAAGrB,WAAW,CAACI,KAAK,EAAEC,UAAU,EAAEC,MAAM,CAACe,CAAC,EAAEpB,WAAW,CAACiB,KAAK,CAAC;EACrE,IAAIM,KAAK,KAAK,CAAC,EAAE;IACb,OAAO/B,SAAS,CAACwC,CAAC,EAAEE,CAAC,EAAEE,CAAC,EAAEhB,CAAC,CAAC;EAChC;EACA,OAAO5B,SAAS,CAACmC,YAAY,CAACK,CAAC,EAAET,KAAK,CAAC,EAAEI,YAAY,CAACO,CAAC,EAAEX,KAAK,CAAC,EAAEI,YAAY,CAACS,CAAC,EAAEb,KAAK,CAAC,EAAEH,CAAC,CAAC;AAC/F,CAAC;AACD,IAAMiB,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIhC,MAAM,EAAK;EAClC,SAAS;;EACT,IAAM2B,CAAC,GAAG,EAAE;EACZ,IAAME,CAAC,GAAG,EAAE;EACZ,IAAME,CAAC,GAAG,EAAE;EACZ,IAAMhB,CAAC,GAAG,EAAE;EACZ,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,CAACS,MAAM,EAAE,EAAED,CAAC,EAAE;IACpC,IAAMyB,KAAK,GAAGjC,MAAM,CAACQ,CAAC,CAAC;IACvB,IAAM0B,cAAc,GAAG9C,YAAY,CAAC6C,KAAK,CAAC;IAE1C,IAAIC,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAKC,SAAS,EAAE;MACzDR,CAAC,CAAChB,IAAI,CAACtB,GAAG,CAAC6C,cAAc,CAAC,CAAC;MAC3BL,CAAC,CAAClB,IAAI,CAACrB,KAAK,CAAC4C,cAAc,CAAC,CAAC;MAC7BH,CAAC,CAACpB,IAAI,CAACpB,IAAI,CAAC2C,cAAc,CAAC,CAAC;MAC5BnB,CAAC,CAACJ,IAAI,CAACnB,OAAO,CAAC0C,cAAc,CAAC,CAAC;IACnC;EACJ;EACA,OAAO;IAAEP,CAAC,EAADA,CAAC;IAAEE,CAAC,EAADA,CAAC;IAAEE,CAAC,EAADA,CAAC;IAAEhB,CAAC,EAADA;EAAE,CAAC;AACzB,CAAC;AACD,IAAMqB,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIpC,MAAM,EAAK;EAClC,SAAS;;EACT,IAAME,CAAC,GAAG,EAAE;EACZ,IAAMW,CAAC,GAAG,EAAE;EACZ,IAAMC,CAAC,GAAG,EAAE;EACZ,IAAMC,CAAC,GAAG,EAAE;EACZ,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,CAACS,MAAM,EAAE,EAAED,CAAC,EAAE;IACpC,IAAMyB,KAAK,GAAGjC,MAAM,CAACQ,CAAC,CAAC;IACvB,IAAM0B,cAAc,GAAG9C,YAAY,CAAC6C,KAAK,CAAC;IAC1C,IAAI,OAAOC,cAAc,KAAK,QAAQ,EAAE;MACpC,IAAMG,iBAAiB,GAAGnD,QAAQ,CAACG,GAAG,CAAC6C,cAAc,CAAC,EAAE5C,KAAK,CAAC4C,cAAc,CAAC,EAAE3C,IAAI,CAAC2C,cAAc,CAAC,CAAC;MACpGhC,CAAC,CAACS,IAAI,CAAC0B,iBAAiB,CAACnC,CAAC,CAAC;MAC3BW,CAAC,CAACF,IAAI,CAAC0B,iBAAiB,CAACxB,CAAC,CAAC;MAC3BC,CAAC,CAACH,IAAI,CAAC0B,iBAAiB,CAACvB,CAAC,CAAC;MAC3BC,CAAC,CAACJ,IAAI,CAACnB,OAAO,CAAC0C,cAAc,CAAC,CAAC;IACnC;EACJ;EACA,OAAO;IAAEhC,CAAC,EAADA,CAAC;IAAEW,CAAC,EAADA,CAAC;IAAEC,CAAC,EAADA,CAAC;IAAEC,CAAC,EAADA;EAAE,CAAC;AACzB,CAAC;AACD,OAAO,IAAMuB,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIxC,KAAK,EAAEC,UAAU,EAAEwC,WAAW,EAAuC;EAClG,SAAS;;EAAC,IADmDC,UAAU,GAAAC,SAAA,CAAAhC,MAAA,QAAAgC,SAAA,QAAAN,SAAA,GAAAM,SAAA,MAAG,KAAK;EAAA,IAAExC,OAAO,GAAAwC,SAAA,CAAAhC,MAAA,QAAAgC,SAAA,QAAAN,SAAA,GAAAM,SAAA,MAAG,CAAC,CAAC;EAE7F,IAAID,UAAU,KAAK,KAAK,EAAE;IACtB,OAAO3C,oBAAoB,CAACC,KAAK,EAAEC,UAAU,EAAEqC,iBAAiB,CAACG,WAAW,CAAC,EAAEtC,OAAO,CAAC;EAC3F,CAAC,MACI,IAAIuC,UAAU,KAAK,KAAK,EAAE;IAC3B,OAAOhB,oBAAoB,CAAC1B,KAAK,EAAEC,UAAU,EAAEiC,iBAAiB,CAACO,WAAW,CAAC,EAAEtC,OAAO,CAAC;EAC3F;EACA,MAAM,IAAIyC,KAAK,oCAAkCF,UAAU,4CAAyC;AACxG,CAAC;AACD,OAAO,IAAIG,UAAU;AACrB,CAAC,UAAUA,UAAU,EAAE;EACnBA,UAAU,CAACA,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;EACzCA,UAAU,CAACA,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AAC7C,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC,OAAO,SAASC,oBAAoBA,CAAC7C,UAAU,EAAEwC,WAAW,EAA6C;EAAA,IAA3CC,UAAU,GAAAC,SAAA,CAAAhC,MAAA,QAAAgC,SAAA,QAAAN,SAAA,GAAAM,SAAA,MAAGE,UAAU,CAACE,GAAG;EAAA,IAAE5C,OAAO,GAAAwC,SAAA,CAAAhC,MAAA,QAAAgC,SAAA,QAAAN,SAAA,GAAAM,SAAA,MAAG,CAAC,CAAC;EACnG,OAAO7C,cAAc,CAAC;IAClBG,UAAU,EAAVA,UAAU;IACVwC,WAAW,EAAXA,WAAW;IACXC,UAAU,EAAVA,UAAU;IACVM,KAAK,EAAErD,WAAW,CAAC,IAAI,CAAC;IACxBQ,OAAO,EAAPA;EACJ,CAAC,CAAC;AACN;AACA,OAAO,IAAM8C,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIjD,KAAK,EAAEkD,iBAAiB,EAAK;EAClE,SAAS;;EACT,IAAIhD,MAAM,GAAGgD,iBAAiB,CAAClD,KAAK,CAACgD,KAAK,CAAChD,KAAK;EAChD,IAAIkD,iBAAiB,CAAClD,KAAK,CAAC0C,UAAU,KAAKG,UAAU,CAACE,GAAG,EAAE;IACvD,IAAI,CAAC7C,MAAM,EAAE;MACTA,MAAM,GAAGgC,iBAAiB,CAACgB,iBAAiB,CAAClD,KAAK,CAACyC,WAAW,CAAC;MAC/DS,iBAAiB,CAAClD,KAAK,CAACgD,KAAK,CAAChD,KAAK,GAAGE,MAAM;IAChD;IACA,OAAOwB,oBAAoB,CAAC1B,KAAK,EAAEkD,iBAAiB,CAAClD,KAAK,CAACC,UAAU,EAAEC,MAAM,EAAEgD,iBAAiB,CAAClD,KAAK,CAACG,OAAO,CAAC;EACnH,CAAC,MACI,IAAI+C,iBAAiB,CAAClD,KAAK,CAAC0C,UAAU,KAAKG,UAAU,CAACM,GAAG,EAAE;IAC5D,IAAI,CAACjD,MAAM,EAAE;MACTA,MAAM,GAAGoC,iBAAiB,CAACY,iBAAiB,CAAClD,KAAK,CAACyC,WAAW,CAAC;MAC/DS,iBAAiB,CAAClD,KAAK,CAACgD,KAAK,CAAChD,KAAK,GAAGE,MAAM;IAChD;IACA,OAAOH,oBAAoB,CAACC,KAAK,EAAEkD,iBAAiB,CAAClD,KAAK,CAACC,UAAU,EAAEC,MAAM,EAAEgD,iBAAiB,CAAClD,KAAK,CAACG,OAAO,CAAC;EACnH;EACA,MAAM,IAAIyC,KAAK,oCAAkCM,iBAAiB,CAAClD,KAAK,CAAC0C,UAAU,4CAAyC;AAChI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
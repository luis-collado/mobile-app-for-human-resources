{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function handleLogin() {\n    console.log('Email:', email);\n    console.log('Password:', password);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      label: \"Correo electr\\xF3nico\",\n      value: email,\n      onChangeText: setEmail,\n      style: styles.input,\n      keyboardType: \"email-address\",\n      autoCapitalize: \"none\"\n    }), _jsx(TextInput, {\n      label: \"Contrase\\xF1a\",\n      value: password,\n      onChangeText: setPassword,\n      style: styles.input,\n      secureTextEntry: true\n    }), _jsx(HelperText, {\n      type: \"error\",\n      visible: password.length < 8,\n      children: \"La contrase\\xF1a debe tener al menos 8 caracteres\"\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: handleLogin,\n      style: styles.button,\n      children: \"Iniciar sesi\\xF3n\"\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 16\n  },\n  input: {\n    marginBottom: 8\n  },\n  button: {\n    marginTop: 16\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","View","StyleSheet","TextInput","Button","HelperText","jsx","_jsx","jsxs","_jsxs","LoginScreen","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleLogin","console","log","style","styles","container","children","label","value","onChangeText","input","keyboardType","autoCapitalize","secureTextEntry","type","visible","length","mode","onPress","button","create","flex","justifyContent","paddingHorizontal","marginBottom","marginTop"],"sources":["C:/Users/crake/VisualWorkspace/chatgpt/MarlexAppExpo/src/LoginScreen.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport {View, StyleSheet} from 'react-native';\r\nimport {TextInput, Button, HelperText} from 'react-native-paper';\r\n\r\nconst LoginScreen = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleLogin = () => {\r\n    // Aquí puedes implementar la lógica de inicio de sesión con tu backend\r\n    console.log('Email:', email);\r\n    console.log('Password:', password);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput\r\n        label=\"Correo electrónico\"\r\n        value={email}\r\n        onChangeText={setEmail}\r\n        style={styles.input}\r\n        keyboardType=\"email-address\"\r\n        autoCapitalize=\"none\"\r\n      />\r\n      <TextInput\r\n        label=\"Contraseña\"\r\n        value={password}\r\n        onChangeText={setPassword}\r\n        style={styles.input}\r\n        secureTextEntry\r\n      />\r\n      <HelperText type=\"error\" visible={password.length < 8}>\r\n        La contraseña debe tener al menos 8 caracteres\r\n      </HelperText>\r\n      <Button mode=\"contained\" onPress={handleLogin} style={styles.button}>\r\n        Iniciar sesión\r\n      </Button>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    paddingHorizontal: 16,\r\n  },\r\n  input: {\r\n    marginBottom: 8,\r\n  },\r\n  button: {\r\n    marginTop: 16,\r\n  },\r\n});\r\n\r\nexport default LoginScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAEtC,SAAQC,SAAS,EAAEC,MAAM,EAAEC,UAAU,QAAO,oBAAoB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEjE,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EACxB,IAAAC,SAAA,GAA0BX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAgChB,QAAQ,CAAC,EAAE,CAAC;IAAAiB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAE5B,IAAMG,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IAExBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAER,KAAK,CAAC;IAC5BO,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,QAAQ,CAAC;EACpC,CAAC;EAED,OACET,KAAA,CAACR,IAAI;IAACsB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BnB,IAAA,CAACJ,SAAS;MACRwB,KAAK,EAAC,uBAAoB;MAC1BC,KAAK,EAAEd,KAAM;MACbe,YAAY,EAAEd,QAAS;MACvBQ,KAAK,EAAEC,MAAM,CAACM,KAAM;MACpBC,YAAY,EAAC,eAAe;MAC5BC,cAAc,EAAC;IAAM,EACrB,EACFzB,IAAA,CAACJ,SAAS;MACRwB,KAAK,EAAC,eAAY;MAClBC,KAAK,EAAEV,QAAS;MAChBW,YAAY,EAAEV,WAAY;MAC1BI,KAAK,EAAEC,MAAM,CAACM,KAAM;MACpBG,eAAe;IAAA,EACf,EACF1B,IAAA,CAACF,UAAU;MAAC6B,IAAI,EAAC,OAAO;MAACC,OAAO,EAAEjB,QAAQ,CAACkB,MAAM,GAAG,CAAE;MAAAV,QAAA,EAAC;IAEvD,EAAa,EACbnB,IAAA,CAACH,MAAM;MAACiC,IAAI,EAAC,WAAW;MAACC,OAAO,EAAElB,WAAY;MAACG,KAAK,EAAEC,MAAM,CAACe,MAAO;MAAAb,QAAA,EAAC;IAErE,EAAS;EAAA,EACJ;AAEX,CAAC;AAED,IAAMF,MAAM,GAAGtB,UAAU,CAACsC,MAAM,CAAC;EAC/Bf,SAAS,EAAE;IACTgB,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,iBAAiB,EAAE;EACrB,CAAC;EACDb,KAAK,EAAE;IACLc,YAAY,EAAE;EAChB,CAAC;EACDL,MAAM,EAAE;IACNM,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAenC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
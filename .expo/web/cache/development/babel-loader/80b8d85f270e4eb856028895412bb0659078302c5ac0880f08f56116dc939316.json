{"ast":null,"code":"import { processColor } from \"./Colors\";\nimport { makeShareable, isConfigured } from \"./core\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nimport { shouldBeUseWeb } from \"./PlatformChecker\";\nexport var colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nexport var ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nvar updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = function updatePropsByPlatform(_, updates, maybeViewRef) {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach(function (item, _) {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  updatePropsByPlatform = function updatePropsByPlatform(viewDescriptors, updates, _) {\n    'worklet';\n\n    for (var key in updates) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    }\n    viewDescriptors.value.forEach(function (viewDescriptor) {\n      _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n    });\n  };\n}\nexport var updateProps = updatePropsByPlatform;\nexport var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) {\n  adapters.forEach(function (adapter) {\n    adapter(updates);\n  });\n  animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;","map":{"version":3,"names":["processColor","makeShareable","isConfigured","_updatePropsJS","shouldBeUseWeb","colorProps","ColorProperties","updatePropsByPlatform","_","updates","maybeViewRef","items","forEach","item","viewDescriptors","key","indexOf","value","viewDescriptor","_updateProps","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current","Object","assign"],"sources":["D:/Desktop/Tim/mobile-app-for-human-resources/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"sourcesContent":["import { processColor } from './Colors';\r\nimport { makeShareable, isConfigured } from './core';\r\nimport { _updatePropsJS } from './js-reanimated';\r\nimport { shouldBeUseWeb } from './PlatformChecker';\r\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\r\nexport const colorProps = [\r\n    'backgroundColor',\r\n    'borderBottomColor',\r\n    'borderColor',\r\n    'borderLeftColor',\r\n    'borderRightColor',\r\n    'borderTopColor',\r\n    'borderStartColor',\r\n    'borderEndColor',\r\n    'color',\r\n    'shadowColor',\r\n    'textDecorationColor',\r\n    'tintColor',\r\n    'textShadowColor',\r\n    'overlayColor',\r\n];\r\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\r\nlet updatePropsByPlatform;\r\nif (shouldBeUseWeb()) {\r\n    updatePropsByPlatform = (_, updates, maybeViewRef) => {\r\n        'worklet';\r\n        if (maybeViewRef) {\r\n            maybeViewRef.items.forEach((item, _) => {\r\n                _updatePropsJS(updates, item);\r\n            });\r\n        }\r\n    };\r\n}\r\nelse {\r\n    updatePropsByPlatform = (viewDescriptors, updates, _) => {\r\n        'worklet';\r\n        for (const key in updates) {\r\n            if (ColorProperties.indexOf(key) !== -1) {\r\n                updates[key] = processColor(updates[key]);\r\n            }\r\n        }\r\n        viewDescriptors.value.forEach((viewDescriptor) => {\r\n            _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\r\n        });\r\n    };\r\n}\r\nexport const updateProps = updatePropsByPlatform;\r\nexport const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {\r\n    adapters.forEach((adapter) => {\r\n        adapter(updates);\r\n    });\r\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\r\n    updateProps(viewDescriptors, updates, maybeViewRef);\r\n};\r\nexport default updateProps;\r\n"],"mappings":"AAAA,SAASA,YAAY;AACrB,SAASC,aAAa,EAAEC,YAAY;AACpC,SAASC,cAAc;AACvB,SAASC,cAAc;AAEvB,OAAO,IAAMC,UAAU,GAAG,CACtB,iBAAiB,EACjB,mBAAmB,EACnB,aAAa,EACb,iBAAiB,EACjB,kBAAkB,EAClB,gBAAgB,EAChB,kBAAkB,EAClB,gBAAgB,EAChB,OAAO,EACP,aAAa,EACb,qBAAqB,EACrB,WAAW,EACX,iBAAiB,EACjB,cAAc,CACjB;AACD,OAAO,IAAMC,eAAe,GAAG,CAACJ,YAAY,EAAE,GAAG,EAAE,GAAGD,aAAa,CAACI,UAAU,CAAC;AAC/E,IAAIE,qBAAqB;AACzB,IAAIH,cAAc,EAAE,EAAE;EAClBG,qBAAqB,GAAG,SAAAA,sBAACC,CAAC,EAAEC,OAAO,EAAEC,YAAY,EAAK;IAClD,SAAS;;IACT,IAAIA,YAAY,EAAE;MACdA,YAAY,CAACC,KAAK,CAACC,OAAO,CAAC,UAACC,IAAI,EAAEL,CAAC,EAAK;QACpCL,cAAc,CAACM,OAAO,EAAEI,IAAI,CAAC;MACjC,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC,MACI;EACDN,qBAAqB,GAAG,SAAAA,sBAACO,eAAe,EAAEL,OAAO,EAAED,CAAC,EAAK;IACrD,SAAS;;IACT,KAAK,IAAMO,GAAG,IAAIN,OAAO,EAAE;MACvB,IAAIH,eAAe,CAACU,OAAO,CAACD,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QACrCN,OAAO,CAACM,GAAG,CAAC,GAAGf,YAAY,CAACS,OAAO,CAACM,GAAG,CAAC,CAAC;MAC7C;IACJ;IACAD,eAAe,CAACG,KAAK,CAACL,OAAO,CAAC,UAACM,cAAc,EAAK;MAC9CC,YAAY,CAACD,cAAc,CAACE,GAAG,EAAEF,cAAc,CAACG,IAAI,IAAI,SAAS,EAAEZ,OAAO,CAAC;IAC/E,CAAC,CAAC;EACN,CAAC;AACL;AACA,OAAO,IAAMa,WAAW,GAAGf,qBAAqB;AAChD,OAAO,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIT,eAAe,EAAEL,OAAO,EAAEC,YAAY,EAAEc,aAAa,EAAEC,QAAQ,EAAK;EACvGA,QAAQ,CAACb,OAAO,CAAC,UAACc,OAAO,EAAK;IAC1BA,OAAO,CAACjB,OAAO,CAAC;EACpB,CAAC,CAAC;EACFe,aAAa,CAACG,OAAO,CAACV,KAAK,GAAGW,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,aAAa,CAACG,OAAO,CAACV,KAAK,CAAC,EAAER,OAAO,CAAC;EACpGa,WAAW,CAACR,eAAe,EAAEL,OAAO,EAAEC,YAAY,CAAC;AACvD,CAAC;AACD,eAAeY,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}